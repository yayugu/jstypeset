## coffee -csb

###
char: 1トークン，一文字とは限らない
text: 一連の文字や文字的なものの並び，StringではなくArray
###

class JSType
  constructor: (@canvasContext) ->

  drawChars: (chars, offsetX = 0, offsetY = 0) ->
    for c in chars
      @canvasContext.fillText(c.char, c.x + offsetX, c.y + offsetY)


  stringToChars: (string) ->
    stringToArray = (string) -> (c for c in string)
    chars = []

    while(true)
      if m = string.match(/[a-zA-Z]+/)
        if m.index != 0
          chars = chars.concat stringToArray(string.slice(0, m.index - 1))
        chars.push @wordToChar(m[0])
        string = string.slice(m.index + m[0].length)
      else
        chars = chars.concat stringToArray(string)
        break
    
    chars

  wordToChar: (word) ->
    {
      char: word
      type: 'word_propotional'
      width: @canvasContext.measureText(word).width
    }

  typesetRow: (text, fontSize, rowSize) ->
    last = 0
    cursor = 0
    chars = []
    for c in text
      if c.type == 'word_propotional'
        if cursor + c.width <= rowSize
          chars.push {char: c.char, x: cursor}
          cursor += c.width
        else
          break
      else
        if cursor + fontSize <= rowSize
          chars.push {char: c, x: cursor}
          cursor += fontSize
        else
          break
      last++
    {chars: chars, overflow: text.slice(last)}

  typesetRowWithSpring: (text, fontSize, rowSize) ->
    last = 0
    cursor = 0
    cursorMin = 0
    cursorMax = 0
    lengthMin = 0
    lengthMax = 0
    chars = []
    for c in text
      switch c.type
        when 'word_propotional'
          if cursor + c.width <= rowSize
            chars.push {char: c.char, x: cursor}
            cursor += c.width
          else
            break
        when 'spring'
          cursorMin += c.plus
          cursorMax += c.minus
        else
          if cursor + fontSize <= rowSize
            chars.push {char: c, x: cursor}
            cursor += fontSize
          else
            break
      last++

    # ##################################################
    while true
      if cursor + springMin > rowSize
        #文字減らす処理
      else if cursor + springMax < rowSize
        #文字増やす(できる？)
      else
        #ぴったりになるように調整
        break
    {chars: chars, overflow: text.slice(last)}

  typesetBox: (text, fontSize, lineSpace, rowSize, colSize) ->
    numLine = Math.floor((colSize - fontSize) / (fontSize + lineSpace) + 1)
    box = []
    i = 0
    while i < numLine
      row = @typesetRow(text, fontSize, rowSize)
      for c in row.chars
        c.y = i * (fontSize + lineSpace)
      box.push row.chars
      text = row.overflow
      break if text.length == 0
      i++
    {box: box, overflow: text}


$ ->
  box = $('.typeset-box')
  width = box.attr('width')
  height = box.attr('height')
  canvas = $('<canvas />')
  canvas.attr
    width: '500px'
    height: '500px'
    style: 'border: solid 1px #000000;'
  canvasContext = canvas[0].getContext("2d")
  canvasContext.font = "15px sans-serif"
  ###
  drawChars context, [
    {char: 'い', x: 20, y: 30}
    {char: 'ろ', x: 35, y: 30}
  ]
  ###
  #res = typesetBox(['こ','ん','に','ち', reduceWordChar('Taro'), 'は'], 15, 5, 100, 1000)
  #for row in res.box
    #drawChars row, 10, 30

  t = new JSType canvasContext
  chars = t.stringToChars "Web の開発、制作者は少なくとも Safari, Chrome, Firefox のいずれかは使っていると思う。これらのブラウザを使っているならぜひオススメ。毎回の reload から完全に解放されるのはちょっと想像以上にインパクトが大きい。ただ、個人的にはイチオシの LiveReload だけど Windows 環境ではちょっと制限が厳しい。ちゃんと手順に従えば間違いなく動く（1.6については）ので、コスト計算がちゃんとできる人にはぜひ試してもらいたい。"
  res = t.typesetBox(chars, 15, 5, 120, 1000)
  for row in res.box
    t.drawChars row, 10, 60


  box.append(canvas)

# vim: set ft=coffee :


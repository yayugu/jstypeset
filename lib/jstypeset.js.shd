## coffee -csb

class CharAndSpringList
  constructor: (@fontSize) ->
    @chars = []
    @springPlus = 0
    @springMinus = 0
    @charsLength = 0
    @charsAndSprings = []

  push: (char) ->
    @charsAndSprings.push(char)
    switch char.type
      when 'spring'
        @springPlus += Math.abs(char.plus)
        @springMinus -= Math.abs(char.minus)
      when 'word_propotional'
        @chars.push(char)
        @charsLength += char.width
      else
        @chars.push(char)
        @charsLength += @fontSize

  maxLength: ->
    @charsLength + @springPlus
  minLength: ->
    @charsLength + @springMinus

  stretchRatio: (rowSize) ->
    (rowSize - @charsLength) / (
      if @charsLength < rowSize
        @springPlus
      else
        @springMinus
    )

  clone: ->
    c = new CharAndSpringList(@fontSize)
    c.chars = @chars.slice()
    c.springPlus = @springPlus
    c.springMinus = @springMinus
    c.charsLength = @charsLength
    c.charsAndSprings = @charsAndSprings.slice()
    return c


###
char: 1トークン，一文字とは限らない
text: 一連の文字や文字的なものの並び，StringではなくArray
###

class JSType
  constructor: (@canvasContext) ->

  drawChars: (chars, offsetX = 0, offsetY = 0) ->
    for c in chars
      @canvasContext.fillText(c.char, c.x + offsetX, c.y + offsetY)


  stringToChars: (string) ->
    stringToArray = (string) -> (c for c in string)
    chars = []

    while(true)
      if m = string.match(/[a-zA-Z]+/)
        if m.index != 0
          chars = chars.concat stringToArray(string.slice(0, m.index))
        chars.push @wordToChar(m[0])
        string = string.slice(m.index + m[0].length)
      else
        chars = chars.concat stringToArray(string)
        break
    
    chars

  wordToChar: (word) ->
    {
      char: word
      type: 'word_propotional'
      width: @canvasContext.measureText(word).width
    }

  insertSprings: (chars, plus = 5, minus = 5) ->
    result = []
    for c in chars
      result.push c
      result.push {
        type: 'spring'
        plus: plus
        minus: minus
      }
    result.pop()
    result

  typesetRow: (text, fontSize, rowSize) ->
    last = 0
    cursor = 0
    chars = []
    for c in text
      if c.type == 'word_propotional'
        width = c.width
        char = c.char
      else
        width = fontSize
        char = c
      if cursor + width <= rowSize
        chars.push {char: char, x: cursor}
        cursor += width
      else
        break
      last++
    {chars: chars, overflow: text.slice(last)}

  proposeRows: (rawChars, rowSize) ->
    last = 0
    cursor = 0
    charsList = []
    chars = new CharAndSpringList @fontSize
    for c in rawChars
      chars = chars.clone()
      chars.push(c)
      if chars.minLength() <= rowSize <= chars.maxLength() && c.type != 'spring'
        charsList.push chars
      else if rowSize < chars.minLength()
        break
    if charsList.length == 0
      [chars]
    else
      charsList

  choiceRow: (charsList, rowSize) ->
    charsList.sort((a, b) -> a.stretchRatio(rowSize) - b.stretchRatio(rowSize))[0]
    
  ##
  typesetRowJustify: (chars, rowSize) ->
    springWidth = rowSize - chars.charsLength
    cursor = 0
    row = []
    for c in chars.chars
      if c.type == 'word_propotional'
        width = c.width
        char = c.char
      else
        width = @fontSize
        char = c
      row.push {char: char, x: cursor}
      cursor += width
      cursor += springWidth / chars.chars.length
    row
        
  typesetRowWithSpring: (rawChars, fontSize, rowSize) ->
    @fontSize = fontSize
    charsList = @proposeRows(rawChars, rowSize)
    chars = @choiceRow(charsList, rowSize)
    row = @typesetRowJustify(chars, rowSize)
    {chars: row, overflow: rawChars.slice(chars.charsAndSprings.length)}
  
  typesetBox: (text, fontSize, lineSpace, rowSize, colSize) ->
    numLine = Math.floor((colSize - fontSize) / (fontSize + lineSpace) + 1)
    box = []
    i = 0
    while i < numLine
      row = @typesetRowWithSpring(text, fontSize, rowSize)
      for c in row.chars
        c.y = i * (fontSize + lineSpace)
      box.push row.chars
      text = row.overflow
      break if text.length == 0
      i++
    {box: box, overflow: text}



# vim: set ft=coffee :

